// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String   @id @default(cuid())
  name                 String?
  email                String   @unique
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  savingsGoal          Float?   @default(0)
  targetDate           DateTime?
  monthlyIncome        Float?   @default(0)
  dailySpendingLimit   Float?   @default(0)
  aiEnabled            Boolean  @default(true)
  aiStrictnessLevel    Int      @default(5) // 1-10 scale

  accounts         Account[]
  sessions         Session[]
  transactions     Transaction[]
  categories       Category[]
  budgets          Budget[]
  aiInteractions   AIInteraction[]
  savingsGoals     SavingsGoal[]
  spendingPlans    SpendingPlan[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id             String   @id @default(cuid())
  name           String
  color          String   @default("#3b82f6")
  icon           String   @default("üìù")
  userId         String?
  necessityLevel Int      @default(3) // 1-5 scale (1=luxury, 5=essential)
  isDefault      Boolean  @default(false)
  spendingLimit  Float?
  createdAt      DateTime @default(now())

  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@map("categories")
}

model Transaction {
  id             String      @id @default(cuid())
  userId         String
  amount         Float
  categoryId     String
  description    String
  date           DateTime    @default(now())
  type           TransactionType @default(EXPENSE)
  necessityScore Int?        @default(5) // 1-10 scale
  aiFlagged      Boolean     @default(false)
  aiAdvice       String?     @db.Text
  location       String?
  receiptUrl     String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@index([userId, date])
  @@map("transactions")
}

model Budget {
  id         String     @id @default(cuid())
  userId     String
  categoryId String
  amount     Float
  period     BudgetPeriod @default(MONTHLY)
  createdAt  DateTime   @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId, period])
  @@map("budgets")
}

model AIInteraction {
  id              String             @id @default(cuid())
  userId          String
  interactionType AIInteractionType
  message         String             @db.Text
  response        String             @db.Text
  contextData     Json?
  timestamp       DateTime           @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@map("ai_interactions")
}

model SavingsGoal {
  id           String   @id @default(cuid())
  userId       String
  goalName     String
  targetAmount Float
  targetDate   DateTime
  currentSaved Float    @default(0)
  priority     Int      @default(1) // 1-5 scale
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings_goals")
}

model SpendingPlan {
  id             String   @id @default(cuid())
  userId         String
  dailyLimit     Float
  weeklyLimit    Float
  categoryLimits Json     // JSON object with category limits
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("spending_plans")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum AIInteractionType {
  CONSULTATION
  WARNING
  CELEBRATION
  COACHING
  ANALYSIS
}